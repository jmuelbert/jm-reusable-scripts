---
# SPDX-License-Identifier: EUPL-1.2
# SPDX-FileCopyrightText: 2025-present J√ºrgen M√ºlbert <juergen.muelbert@outlook.de>

name: 'CodeQL Security Analysis'

on: # yamllint disable-line rule:truthy
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/'
  schedule:
    - cron: 17 16 * * 3
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

env:
  PACKAGE_NAME: checkconnect

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    timeout-minutes: 30
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.

    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          # - language: c-cpp
          #    build-mode: autobuild
          - language: javascript-typescript
            build-mode: none
          - language: python
            build-mode: none
            # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
            # Use `c-cpp` to analyze code written in C, C++ or both
            # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
            # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
            # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
            # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
            # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
            # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages

    steps:
      - name: üîí Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          output: 'results'

      - name: üìä Process Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const language = "${{ matrix.language }}";  // Get the language from the matrix
            let sarifFile = `results/${language}.sarif`;
            // Correct the sarif file name if the language is javascript-typescript
            if (language === 'javascript-typescript') {
                sarifFile = 'results/javascript.sarif';
            }
            let allResults = []; // Accumulate results for all languages
            let hasSecurityIssues = false;  // Track if any issues were found

            try {
              if (!fs.existsSync(sarifFile)) {
                console.log(`No SARIF file found for ${language} at ${sarifFile}. Skipping results processing.`);
                return;
              }

              const sarif = JSON.parse(fs.readFileSync(sarifFile, 'utf8'));
              const results = sarif.runs[0].results || [];
              allResults = results;

              let languageSummary = `### ${language} Analysis\n`;

              if (results.length === 0) {
                languageSummary += `‚úÖ No security issues found!\n`;
              } else {
                hasSecurityIssues = true; // Flag that we have issues

                const severity = {
                  error: 0,
                  warning: 0,
                  note: 0
                };

                results.forEach(result => {
                  severity[result.level || 'warning']++;
                });

                languageSummary += `Found Issues:\n`;
                languageSummary += `- üî¥ Errors: ${severity.error}\n`;
                languageSummary += `- üü° Warnings: ${severity.warning}\n`;
                languageSummary += `- üîµ Notes: ${severity.note}\n\n`;

                languageSummary += `Recommendations:\n`;
                languageSummary += `1. Review the detailed analysis in the Security tab\n`;
                languageSummary += `2. Follow the suggested fixes for each issue\n`;
                languageSummary += `3. Run CodeQL locally using the GitHub CLI\n`;
              }

              console.log(languageSummary); // Log to the console for debugging


              // Store the language-specific summary in an output variable.  This is needed to combine summaries
              // in a later step if running in a matrix.
              core.setOutput(`${language}-summary`, languageSummary);



            } catch (error) {
              console.error(`Error processing CodeQL results for ${language}:`, error);
              core.setFailed(`CodeQL analysis failed for ${language}: ${error.message}`);

            }

      - name: Combine and Post Results
        if: always()
        uses: actions/github-script@v7
        # TODO: #253 Run in failure. RequestError [HttpError]: Resource not accessible by integration
        with:
          script: |
            const pythonSummary = core.getInput('python-summary', { required: false });
            const javascriptTypescriptSummary = core.getInput('javascript-typescript-summary', { required: false });

            let summary = `## üõ°Ô∏è CodeQL Security Analysis Results\n\n`;

            if (pythonSummary) {
              summary += pythonSummary + "\n";
            }

            if (javascriptTypescriptSummary) {
              summary += javascriptTypescriptSummary + "\n";
            }

            if (!pythonSummary && !javascriptTypescriptSummary) {
              summary += "‚úÖ No CodeQL analysis was run or no results were found for any language.\n";
            }

            const hasSecurityIssues = pythonSummary?.includes("üî¥ Errors:") || javascriptTypescriptSummary?.includes("üî¥ Errors:");

            if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: summary
                  });
              }

            // Update PR labels (only if it's a pull request)
            if (context.payload.pull_request) {
              const labels = hasSecurityIssues
                ? ['security-review-needed']
                : ['security-validated'];

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: labels
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # You might need to set this for the script action to work
