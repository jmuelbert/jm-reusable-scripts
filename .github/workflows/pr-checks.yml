---
# SPDX-FileCopyrightText: Jürgen Mülbert
# SPDX-License-Identifier: EUPL-1.2
name: PR Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - develop
      - feature/**
      - bugfix/**
permissions:
  contents: read
  issues: write
  pull-requests: write
env:
  PACKAGE_NAME: checkconnect
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  validate:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 🔎 Dependency Review
        id: review
        uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always
          fail-on-severity: moderate
          retry-on-snapshot-warnings: true
          config-file: .github/dependency-review-config.yml
      - name: 📊 Generate Report
        if: always()
        env:
          DEPENDENCY_CHANGES: ${{ steps.review.outputs.dependency-changes }}
          VULNERABLE_CHANGES: ${{ steps.review.outputs.vulnerable-changes }}
          LICENSE_CHANGES: ${{ steps.review.outputs.invalid-license-changes }}
          DENIED_CHANGES: ${{ steps.review.outputs.denied-changes }}
        uses: actions/github-script@v7
        with:
          script: |
            const outputs = {
              dependencyChanges: JSON.parse(process.env.DEPENDENCY_CHANGES || '[]'),
              vulnerableChanges: JSON.parse(process.env.VULNERABLE_CHANGES || '[]'),
              licenseChanges: JSON.parse(process.env.LICENSE_CHANGES || '[]'),
              deniedChanges: JSON.parse(process.env.DENIED_CHANGES || '[]'),
            };

            let report = '## 📋 Dependency Review Report\n\n';

            // Dependency Summary
            report += `### 📑 Summary\n`;
            report += `- Total Changes: ${outputs.dependencyChanges.length}\n`;
            report += `- Vulnerable Changes: ${outputs.vulnerableChanges.length}\n`;
            report += `- License Issues: ${outputs.licenseChanges.length}\n`;
            report += `- Denied Changes: ${outputs.deniedChanges.length}\n\n`;

            // Vulnerabilities
            if (outputs.vulnerableChanges.length > 0) {
              report += '### ⚠️ Vulnerable Changes\n\n';
              outputs.vulnerableChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.advisory.title}\n`;
              report += `  - Severity: ${change.advisory.severity}\n`;
              report += `  - Advisory: [${change.advisory.url}](${change.advisory.url})\n\n`;
              });
            } else {
              report += '### ✅ No Vulnerable Changes Found\n\n';
            }

            // License Issues
            if (outputs.licenseChanges.length > 0) {
              report += '### 🚫 License Issues\n\n';
              outputs.licenseChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.license}\n`;
              report += `  - Allowed Licenses: ${change.allowedLicenses.join(', ')}\n\n`;
              });
            } else {
              report += '### ✅ No License Issues Found\n\n';
            }

            // Denied Changes
            if (outputs.deniedChanges.length > 0) {
              report += '### ❌ Denied Changes\n\n';
              outputs.deniedChanges.forEach(change => {
              report += `- **${change.package.name}@${change.package.version}**: ${change.reason}\n`;
              });
            } else {
              report += '### ✅ No Denied Changes Found\n\n';
            }

            // Post Report
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: report
              });
            }

  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Only run on pull_request events
    outputs:
      title-valid: ${{ steps.check-title.outputs.valid }}
      body-valid: ${{ steps.check-body.outputs.valid }}
    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 🔍 Check PR Title
        id: check-title
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const title = github.context.payload.pull_request?.title || '';
              // Enclose the regex in double quotes and escape special characters
              const conventionalCommitRegex = "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\([\\w-]+\\))?: .{1,100}$";

              const regex = new RegExp(conventionalCommitRegex); // Create a RegExp object

              const isValid = regex.test(title);
              core.setOutput('valid', isValid);

              if (!isValid) {
                const validTypes = ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test'];

                await github.rest.issues.createComment({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  issue_number: github.context.issue.number,
                  body: `## ❌ Invalid PR Title

                  Please follow [Conventional Commits](https://www.conventionalcommits.org/) format:
                  \`type(scope): description\`

                  Valid types:
                  ${validTypes.map(type => `- \`${type}\``).join('\n')}

                  Examples:
                    - \`feat(auth): add login functionality\`
                    - \`fix(api): handle null response\`
                    `
                });
              }
            } catch (error) {
              core.error(`An error occurred during PR title validation: ${error.message}`); // Log the error
              core.setOutput('valid', false); // Ensure it's marked as invalid on error
            }

      - name: 📝 Check PR Body
        id: check-body
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const body = github.context.payload.pull_request?.body || '';
              const minBodyLength = 10; // Minimum body length

              const isValid = body.length >= minBodyLength;
              core.setOutput('valid', isValid);

              if (!isValid) {
                await github.rest.issues.createComment({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  issue_number: github.context.issue.number,
                  body: `## ❌ Insufficient PR Body

                  Please provide a detailed description of the changes made in this pull request. The body should be at least ${minBodyLength} characters long.`
                });
              }
            } catch (error) {
              core.error(`An error occurred during PR body validation: ${error.message}`);
              core.setOutput('valid', false);
            }

      - name: 🏷️ Update Labels
        if: always() && steps.commitlint.outcome != 'skipped'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const outcome = '${{ steps.commitlint.outcome }}';

            const labelsToAdd = [];
            const labelsToRemove = [];

            if (outcome === 'success') {
              labelsToAdd.push('commits-validated');
              labelsToRemove.push('invalid-commits');
            } else {
              labelsToAdd.push('invalid-commits');
              labelsToRemove.push('commits-validated');
            }

            // Add labels
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: context.issue.number,
                labels: labelsToAdd
              });
            }

            // Remove labels
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  ...context.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (error) {
                if (error.status !== 404) throw error;
              }
            }

  trunk_check:
    name: Trunk Code Quality Runner
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Only run on pull_request events
    permissions:
      checks: write # For trunk to post annotations
      contents: read # For repo checkout

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Trunk Code Quality
        uses: trunk-io/trunk-action@v1

  test:
    name: Test with Python on ${{ matrix.os }}
    needs: [validate, validate-pr, trunk_check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    # TODO: #259 Runs in failure on macOS: sudo: apt-get: command not found
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        #exclude:
        #  - os: ubuntu-latest  # No longer excluding Ubuntu
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2 # Use tag instead of SHA
        with:
          egress-policy: audit
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4 # Use tag instead of SHA
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        id: python-setup
      - name: 🧰 Install Dependencies
        run: |
          hatch env create test

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install python # Installs the brew managed python (replaces the action)
          brew install glib
          brew install gobject-introspection
          brew install cmake  # Required for building some PySide6 wheels
          brew install pango
          # You might need to explicitly install additional Qt-related libraries
          # depending on your application's specific needs.  For example:
          brew install qt

      - name: Set DYLD_LIBRARY_PATH (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "DYLD_LIBRARY_PATH=/usr/local/opt/glib/lib:/usr/local/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/opt/qt6-base/:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV # You have probably to install this

      - name: Set up MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          # More complete install for GLib, GObject, and other potential needs.
          install: mingw-w64-x86_64-glib2
            mingw-w64-x86_64-gobject-introspection
            mingw-w64-x86_64-cmake

      - name: Configure PATH (Windows)
        if: runner.os == 'Windows'
        shell: bash
        # TODO: #260 Runs in a bunch of failures: Error: Unable to process command '::add-path::C:\Program Files\Git\usr\bin\usr\bin' successfully.
        run: |
          # Use MSYS2's `where` command to reliably find its install directory
          msys2_install_dir=$(where bash | head -n 1 | sed 's/\\bash.exe//')

          # Check if MSYS2 is installed at all
          if [ -z "$msys2_install_dir" ]; then
            echo "::error title=MSYS2 Not Found::MSYS2 installation not detected.  Ensure it is installed or included in the runner image."
            exit 1  # Fail the step if MSYS2 is not found.  Crucial!
          fi

          # Construct the paths dynamically
          echo "::add-path::$msys2_install_dir\usr\bin"
          echo "::add-path::$msys2_install_dir\mingw64\bin"
          echo "::add-path::$msys2_install_dir\opt\bin"

          # Optional: Output for debugging
          echo "MSYS2 Install Directory: $msys2_install_dir"
          echo "Updated PATH: $PATH

      - name: Verify Installation (Windows) # Check to make sure they were installed
        if: runner.os == 'Windows'
        shell: bash
        run: |
          ls -l /mingw64/bin/libgobject-2.0-0.dll || echo "libgobject-2.0-0.dll not found"
          ls -l /usr/bin/gobject-introspection || echo "gobject-introspection not found"
          cmake --version || echo "cmake not found" # Check cmake

      - name: 🎨 Setup Qt Dependencies on ${{ matrix.os }}
        if: runner.os == 'Linux'
        uses: ./.github/actions/setup-qt-dependencies
      - name: 🧪 Run Tests on ${{ matrix.os }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb* libxi* libxkbcommon*
          xvfb-run --auto-servernum --server-args='-screen 0, 1024x768x24'
          hatch run +py=3.13 test:test

      - name: 🧪 Run Tests and Generate Coverage on ${{ matrix.os }}
        if: runner.os == 'Linux'
        id: coverage
        run: |
          sudo apt-get update
            libegl1 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            xvfb
          # TODO: #258 Runs in failure: xvfb-run: usage error: need a command to run
          sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          hatch run test:cov
          # Use xmllint to extract the coverage percentage
          COVERAGE=$(xmllint --xpath "string(//line-rate)" coverage.xml | awk '{print $1 * 100}')
          echo "percentage=${COVERAGE}" >> "$GITHUB_OUTPUT"

          if [ $(echo "${COVERAGE} < 80" | bc -l) -eq 1 ]; then
            echo "::warning::Coverage ${COVERAGE}% is below threshold of 80%"
            exit 1 # Fail the step if coverage is below 80%
          fi
      - name: 📤 Upload Coverage on ${{ matrix.os }}
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v4 # Use tag instead of SHA
        with:
          files: ./coverage.xml
          flags: ${{ matrix.os }},python
          fail_ci_if_error: true
      - name: 📦 Store Test Results on ${{ matrix.os }}
        if: always() && runner.os == 'Linux'
        uses: actions/upload-artifact@v4 # Use tag instead of SHA
        with:
          name: test-results-${{ matrix.os }}
          path: |
            .coverage
            coverage.xml
            htmlcov/
          retention-days: 7
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      issues: write
      pull-requests: write
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        id: python-setup

      - name: 🔧 Setup PNPM and Node.js
        uses: pnpm/action-setup@v4
        with:
          version: latest
          node_version: 'lts/*'
          cache: 'pnpm'
          run_install: false

      - name: ⚙️ Install Dependencies
        run: pnpm install

      - name: 🧰 Install Dependencies
        run: |
          hatch env create lint
      - name: ✨ Run Prettier
        # TODO: #257 Runs in failure: [error] src/checkconnect/gui/translations/ar.ts: SyntaxError: '>' expected. (1:7)
        run: pnpm dlx prettier --write .
      - name: ✨ Run Pre-commit Checks
        run: hatch run lint:precommit
  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 15
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4
      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        id: python-setup

      - name: 🔧 Setup PNPM and Node.js
        uses: pnpm/action-setup@v4
        with:
          version: latest
          node_version: 'lts/*'
          cache: 'pnpm'
          run_install: false

      - name: ⚙️ Install Dependencies
        run: pnpm install

      - name: 🧰 Install Dependencies
        run: |
          hatch env create lint
      - name: 🔍 Run Spell Checks
        id: spell-check
        run: |
          hatch run lint:spelling
      - name: 🔍 Run CSpell Checks
        id: cspell-check
        run: |
          pnpm dlx cspell **
      - name: 📝 Create Fix PR
        if: ${{ failure() }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: fix spelling issues'
          title: '📝 Fix spelling issues'
          body: 'Automated PR to fix spelling errors detected by codespell.'
          branch: fix/spelling-${{ github.run_id }}
          delete-branch: true
          labels: |
            documentation
            automated-pr
            spelling
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    outputs:
      translation_coverage: ${{ steps.translations.outputs.translation_coverage }}
    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2 # Use tag instead of SHA
        with:
          egress-policy: audit
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4
      - name: Call Python Environment Setup
        uses: ./.github/actions/python-setup
        with:
          id: python-setup
      - name: 🧰 Install Dependencies
        run: |
          hatch env create docs
      - name: 📚 Build Docs
        id: build
        run: |
          hatch run docs:build
      - name: 🔍 Check Links
        run: hatch run docs:validate-links
      - name: 🔍 Quality Check
        run: python docs/scripts/doc_quality.py
        continue-on-error: true
      - name: 📊 Translation Status
        id: translations
        run: |
          python docs/scripts/translation_status.py | tee output.txt
          TRANSLATION_COVERAGE=$(grep "translation_coverage=" output.txt | awk -F "=" '{print $2}')
          echo "translation_coverage=$TRANSLATION_COVERAGE" >> "$GITHUB_OUTPUT"
  report:
    name: Generate Report
    if: always()
    needs: [validate, validate-pr, test, quality-checks, spell-check, docs]
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Process Results
        uses: actions/github-script@v7
        with:
          script: |
            const getResultEmoji = (result) => {
              switch (result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🛑';
                case 'skipped': return '⚪';
                default: return '❓';
              }
            };

            const summary = `## 🔍 PR Check Results

            ### Test Coverage: ${process.env.TEST_COVERAGE}%

            - Validate: ${getResultEmoji(process.env.VALIDATE_RESULT)} ${process.env.VALIDATE_RESULT}
            - Validate-PR: ${getResultEmoji(process.env.VALIDATE_PR_RESULT)} ${process.env.VALIDATE_PR_RESULT}
            - Test: ${getResultEmoji(process.env.TEST_RESULT)} ${process.env.TEST_RESULT} (See details below)
            - Quality-Checks: ${getResultEmoji(process.env.QUALITY_CHECKS_RESULT)} ${process.env.QUALITY_CHECKS_RESULT}
            - Spell-Check: ${getResultEmoji(process.env.SPELL_CHECK_RESULT)} ${process.env.SPELL_CHECK_RESULT}
            - Docs: ${getResultEmoji(process.env.DOCS_RESULT)} ${process.env.DOCS_RESULT}

            ### Details
            - [Coverage Report](https://codecov.io/gh/${process.env.REPOSITORY})
            - [Test Results](${process.env.GITHUB_SERVER_URL}/${process.env.REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            - Translation Coverage: ${process.env.TRANSLATION_COVERAGE}%
            `;

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.payload.pull_request.number,
                body: summary
              });
            }
        env:
          TEST_COVERAGE: ${{ needs.test.outputs.coverage }}
          VALIDATE_RESULT: ${{ needs.validate.result }}
          VALIDATE_PR_RESULT: ${{ needs.validate-pr.result }}
          TEST_RESULT: ${{ needs.test.result }}
          QUALITY_CHECKS_RESULT: ${{ needs.quality-checks.result }}
          SPELL_CHECK_RESULT: ${{ needs.spell-check.result }}
          DOCS_RESULT: ${{ needs.docs.result }}
          REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          TRANSLATION_COVERAGE: ${{ needs.docs.outputs.translation_coverage }}
      - name: 🚨 Check Status
        if: needs.test.result != 'success' || needs.validate-pr.result != 'success' || needs.quality-checks.result != 'success' || needs.docs.result != 'success' || needs.spell-check.result != 'success'
        # TODO: #261 Runs in failure: Error: Process completed with exit code
        run: exit 1
